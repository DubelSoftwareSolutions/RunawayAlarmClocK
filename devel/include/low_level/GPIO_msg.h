// Generated by gencpp from file low_level/GPIO_msg.msg
// DO NOT EDIT!


#ifndef LOW_LEVEL_MESSAGE_GPIO_MSG_H
#define LOW_LEVEL_MESSAGE_GPIO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace low_level
{
template <class ContainerAllocator>
struct GPIO_msg_
{
  typedef GPIO_msg_<ContainerAllocator> Type;

  GPIO_msg_()
    : Device()
    , Command()
    , GPIO_on(false)  {
    }
  GPIO_msg_(const ContainerAllocator& _alloc)
    : Device(_alloc)
    , Command(_alloc)
    , GPIO_on(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Device_type;
  _Device_type Device;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Command_type;
  _Command_type Command;

   typedef uint8_t _GPIO_on_type;
  _GPIO_on_type GPIO_on;





  typedef boost::shared_ptr< ::low_level::GPIO_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::low_level::GPIO_msg_<ContainerAllocator> const> ConstPtr;

}; // struct GPIO_msg_

typedef ::low_level::GPIO_msg_<std::allocator<void> > GPIO_msg;

typedef boost::shared_ptr< ::low_level::GPIO_msg > GPIO_msgPtr;
typedef boost::shared_ptr< ::low_level::GPIO_msg const> GPIO_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::low_level::GPIO_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::low_level::GPIO_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace low_level

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'low_level': ['/home/kdabek/ROSWorkspace/src/low_level/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::low_level::GPIO_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::low_level::GPIO_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level::GPIO_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level::GPIO_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level::GPIO_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level::GPIO_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::low_level::GPIO_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d85d347562b5b0f5f81b70b7e3f78a6c";
  }

  static const char* value(const ::low_level::GPIO_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd85d347562b5b0f5ULL;
  static const uint64_t static_value2 = 0xf81b70b7e3f78a6cULL;
};

template<class ContainerAllocator>
struct DataType< ::low_level::GPIO_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "low_level/GPIO_msg";
  }

  static const char* value(const ::low_level::GPIO_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::low_level::GPIO_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Device\n\
string Command\n\
bool GPIO_on\n\
";
  }

  static const char* value(const ::low_level::GPIO_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::low_level::GPIO_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Device);
      stream.next(m.Command);
      stream.next(m.GPIO_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPIO_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::low_level::GPIO_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::low_level::GPIO_msg_<ContainerAllocator>& v)
  {
    s << indent << "Device: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Device);
    s << indent << "Command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Command);
    s << indent << "GPIO_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GPIO_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOW_LEVEL_MESSAGE_GPIO_MSG_H
