// Generated by gencpp from file low_level/TimeServiceResponse.msg
// DO NOT EDIT!


#ifndef LOW_LEVEL_MESSAGE_TIMESERVICERESPONSE_H
#define LOW_LEVEL_MESSAGE_TIMESERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace low_level
{
template <class ContainerAllocator>
struct TimeServiceResponse_
{
  typedef TimeServiceResponse_<ContainerAllocator> Type;

  TimeServiceResponse_()
    : TimeNow()
    , DateNow()
    , timestamp()  {
    }
  TimeServiceResponse_(const ContainerAllocator& _alloc)
    : TimeNow(_alloc)
    , DateNow(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _TimeNow_type;
  _TimeNow_type TimeNow;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DateNow_type;
  _DateNow_type DateNow;

   typedef ros::Duration _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::low_level::TimeServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::low_level::TimeServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TimeServiceResponse_

typedef ::low_level::TimeServiceResponse_<std::allocator<void> > TimeServiceResponse;

typedef boost::shared_ptr< ::low_level::TimeServiceResponse > TimeServiceResponsePtr;
typedef boost::shared_ptr< ::low_level::TimeServiceResponse const> TimeServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::low_level::TimeServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::low_level::TimeServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace low_level

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'low_level': ['/home/kdabek/ROSWorkspace/src/low_level/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::low_level::TimeServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::low_level::TimeServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level::TimeServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::low_level::TimeServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level::TimeServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::low_level::TimeServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::low_level::TimeServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b92d4bc1f43e333b6254e84d0122aa0";
  }

  static const char* value(const ::low_level::TimeServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b92d4bc1f43e333ULL;
  static const uint64_t static_value2 = 0xb6254e84d0122aa0ULL;
};

template<class ContainerAllocator>
struct DataType< ::low_level::TimeServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "low_level/TimeServiceResponse";
  }

  static const char* value(const ::low_level::TimeServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::low_level::TimeServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string TimeNow\n\
string DateNow\n\
duration timestamp\n\
";
  }

  static const char* value(const ::low_level::TimeServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::low_level::TimeServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TimeNow);
      stream.next(m.DateNow);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::low_level::TimeServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::low_level::TimeServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "TimeNow: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.TimeNow);
    s << indent << "DateNow: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DateNow);
    s << indent << "timestamp: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOW_LEVEL_MESSAGE_TIMESERVICERESPONSE_H
